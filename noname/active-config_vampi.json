{
  "version": "1.1.0",
  "applicationId": "b01c90f4-43b8-4910-9577-9fbc1214fd5e",
  "host": "http://localhost/:5002",
  "sources": [
    {
      "name": "OAS_VAmPI",
      "openApi": {
        "sourceInline": "openapi: 3.0.1\ninfo:\n  title: VAmPI\n  description: OpenAPI v3 specs for VAmPI\n  version: '0.1'\nservers:\n  - url: http://localhost:5000\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearerInfoFunc: models.user_model.User.decode_auth_token\npaths:\n  /createdb:\n    get:\n      tags:\n        - db-init\n      summary: Creates and populates the database with dummy data\n      description: Creates and populates the database with dummy data\n      operationId: api_views.main.populate_db\n      responses:\n        '200':\n          description: Creates and populates the database with dummy data\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: 'Database populated.'\n  /:\n    get:\n      tags:\n        - home\n      summary: VAmPI home\n      description: >-\n        VAmPI is a vulnerable on purpose API. It was created in order to\n        evaluate the efficiency of third party tools in identifying\n        vulnerabilities in APIs but it can also be used in learning/teaching\n        purposes.\n      operationId: api_views.main.basic\n      responses:\n        '200':\n          description: Home - Help\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: 'VAmPI the Vulnerable API'\n                  help:\n                    type: string\n                    example: 'VAmPI is a vulnerable on purpose API. It was created in order to evaluate the efficiency of third party tools in identifying vulnerabilities in APIs but it can also be used in learning/teaching purposes.'\n                  vulnerable:\n                    type: number\n                    example: 1\n  /users/v1:\n    get:\n      tags:\n        - users\n      summary: Retrieves all users\n      description: Displays all users with basic information\n      operationId: api_views.users.get_all_users\n      responses:\n        '200':\n          description: See basic info about all users\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  users:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        email:\n                          type: string\n                          example: 'mail1@mail.com'\n                        username:\n                          type: string\n                          example: 'name1'\n  /users/v1/_debug:\n    get:\n      tags:\n        - users\n      summary: Retrieves all details for all users\n      description: Displays all details for all users\n      operationId: api_views.users.debug\n      responses:\n        '200':\n          description: See all details of the users\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  users:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        admin:\n                          type: boolean\n                          example: false\n                        email:\n                          type: string\n                          example: 'mail1@mail.com'\n                        password:\n                          type: string\n                          example: 'pass1'\n                        username:\n                          type: string\n                          example: 'name1'\n  /users/v1/register:\n    post:\n      tags:\n        - users\n      summary: Register new user\n      description: Register new user\n      operationId: api_views.users.register_user\n      requestBody:\n        description: Username of the user\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: 'name1'\n                password:\n                  type: string\n                  example: 'pass1'\n                email:\n                  type: string\n                  example: 'user@tempmail.com'\n        required: true\n      responses:\n        '200':\n          description: Successfully created user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: 'Successfully registered. Login to receive an auth token.'\n                  status:\n                    type: string\n                    enum: ['success', 'fail']\n                    example: 'success'\n        '400':\n          description: Invalid request\n          content: {}\n  /users/v1/login:\n    post:\n      tags:\n        - users\n      summary: Login to VAmPI\n      description: Login to VAmPI\n      operationId: api_views.users.login_user\n      requestBody:\n        description: Username of the user\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: 'name1'\n                password:\n                  type: string\n                  example: 'pass1'\n        required: true\n      responses:\n        '200':\n          description: Sucessfully logged in user\n          content:\n            application/json:\n                schema:\n                  type: object\n                  properties:\n                    auth_token:\n                      type: string\n                      example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NzAxNjA2MTcsImlhdCI6MTY3MDE2MDU1Nywic3ViIjoiSm9obi5Eb2UifQ.n17N4AxTbL4_z65-NR46meoytauPDjImUxrLiUMSTQw'\n                    message:\n                      type: string\n                      example: 'Successfully logged in.'\n                    status:\n                      type: string\n                      enum: ['success', 'fail']\n                      example: 'success'\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Password is not correct for the given username.'\n  /me:\n    get:\n        security:\n          - bearerAuth: []\n        tags:\n          - users\n        summary: Retrieves currently logged in user\n        description: Displays information about the currently authenticated user\n        operationId: api_views.users.me\n        responses:\n          '200':\n            description: Display current user info\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    data:\n                      type: object\n                      properties:\n                        admin:\n                          type: boolean\n                          example: false\n                        email:\n                          type: string\n                          example: 'mail1@mail.com'\n                        username:\n                          type: string\n                          example: 'name1'\n                    status:\n                      type: string\n                      example: 'success'\n          '401':\n            description: Unauthorized access due to expired, invalid, or missing token\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    status:\n                      type: string\n                      example: 'fail'\n                    message:\n                      type: string\n                      enum:\n                        - 'Signature expired. Please log in again.'\n                        - 'Invalid token. Please log in again.'\n\n  /users/v1/{username}:\n    get:\n      tags:\n        - users\n      summary: Retrieves user by username\n      description: Displays user by username\n      operationId: api_views.users.get_by_username\n      parameters:\n        - name: username\n          in: path\n          description: retrieve username data\n          required: true\n          schema:\n            type: string\n            example: 'name1'\n      responses:\n        '200':\n          description: Successfully display user info\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  username:\n                    type: string\n                    example: 'name1'\n                  email:\n                    type: string\n                    example: 'mail1@mail.com'\n        '404':\n          description: User not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'User not found'\n\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - users\n      summary: Deletes user by username (Only Admins)\n      description: Deletes user by username (Only Admins)\n      operationId: api_views.users.delete_user\n      parameters:\n        - name: username\n          in: path\n          description: Delete username\n          required: true\n          schema:\n            type: string\n            example: 'name1'\n      responses:\n        '200':\n          description: Successfully deleted user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: 'User deleted.'\n                  status:\n                    type: string\n                    enum: ['success', 'fail']\n                    example: 'success'\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: 'fail'\n                    enum: ['fail']\n                  message:\n                    type: string\n                    example: 'Only Admins may delete users!'\n        '404':\n          description: User not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: 'fail'\n                    enum: ['fail']\n                  message:\n                    type: string\n                    example: 'User not found!'\n  /users/v1/{username}/email:\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - users\n      summary: Update users email\n      description: Update a single users email\n      operationId: api_views.users.update_email\n      parameters:\n        - name: username\n          in: path\n          description: username to update email\n          required: true\n          schema:\n            type: string\n            example: 'name1'\n      requestBody:\n        description: field to update\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  example: 'mail3@mail.com'\n        required: true\n      responses:\n        '204':\n          description: Successfully updated user email\n          content: {}\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Please Provide a valid email address.'\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Invalid token. Please log in again.'\n  /users/v1/{username}/password:\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - users\n      summary: Update users password\n      description: Update users password\n      operationId: api_views.users.update_password\n      parameters:\n        - name: username\n          in: path\n          description: username to update password\n          required: true\n          schema:\n            type: string\n            example: 'name1'\n      requestBody:\n        description: field to update\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password:\n                  type: string\n                  example: 'pass4'\n        required: true\n      responses:\n        '204':\n          description: Successfully updated users password\n          content: {}\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Malformed Data'\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Invalid token. Please log in again.'\n  /books/v1:\n    get:\n      tags:\n        - books\n      summary: Retrieves all books\n      description: Retrieves all books\n      operationId: api_views.books.get_all_books\n      responses:\n        '200':\n          description: See all books\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  Books:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        book_title:\n                          type: string\n                        user:\n                          type: string\n              example:\n                Books:\n                  - book_title: 'bookTitle77'\n                    user: 'name1'\n                  - book_title: 'bookTitle85'\n                    user: 'name2'\n                  - book_title: 'bookTitle47'\n                    user: 'admin'\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - books\n      summary: Add new book\n      description: Add new book\n      operationId: api_views.books.add_new_book\n      requestBody:\n        description: >-\n          Add new book with title and secret content only available to the user\n          who added it.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                book_title:\n                  type: string\n                  example: 'book99'\n                secret:\n                  type: string\n                  example: 'pass1secret'\n        required: true\n      responses:\n        '200':\n          description: Successfully added a book\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: 'Book has been added.'\n                  status:\n                    type: string\n                    enum: ['success', 'fail']\n                    example: 'success'\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Book Already exists!'\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Invalid token. Please log in again.'\n  /books/v1/{book_title}:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - books\n      summary: Retrieves book by title along with secret\n      description: >-\n        Retrieves book by title along with secret. Only the owner may retrieve\n        it\n      operationId: api_views.books.get_by_title\n      parameters:\n        - name: book_title\n          in: path\n          description: retrieve book data\n          required: true\n          schema:\n            type: string\n            example: 'bookTitle77'\n      responses:\n        '200':\n          description: Successfully retrieve book info\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    book_title:\n                      type: string\n                      example: 'bookTitle77'\n                    owner:\n                      type: string\n                      example: 'name1'\n                    secret:\n                      type: string\n                      example: 'secret for bookTitle77'\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Invalid token. Please log in again.'\n        '404':\n          description: Book not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                    example: 'fail'\n                  message:\n                    type: string\n                    example: 'Book not found!'\n"
      },
      "auth_mappings": []
    }
  ],
  "auths": [],
  "app": {
    "secrets": []
  }
}